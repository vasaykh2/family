// vite.config.js
import { defineConfig } from "file:///D:/makeroi/linked-fields/node_modules/vite/dist/node/index.js";
import { viteStaticCopy } from "file:///D:/makeroi/linked-fields/node_modules/vite-plugin-static-copy/dist/index.js";
import zipPack from "file:///D:/makeroi/linked-fields/node_modules/vite-plugin-zip-pack/dist/esm/index.mjs";
import { fileURLToPath, URL } from "node:url";

// vite.entry-point.js
import pc from "file:///D:/makeroi/linked-fields/node_modules/picocolors/picocolors.js";
import fs from "fs";
import fg from "file:///D:/makeroi/linked-fields/node_modules/fast-glob/out/index.js";
var log = (msg) => console.error(`${pc.cyan("[entry-point]")} ${pc.green(msg)}`);
var getFileContent = function(file, silence = false) {
  try {
    return fs.readFileSync(`./${file}`);
  } catch (e) {
    if (!silence)
      throw new Error("\u041D\u0435 \u0441\u043C\u043E\u0433\u043B\u0438 \u043E\u0442\u043A\u0440\u044B\u0442\u044C \u0444\u0430\u0439\u043B: " + file);
  }
};
var writeFileContent = function(file, replaced, silence = false) {
  try {
    fs.writeFileSync(`./${file}`, replaced ?? "", {});
  } catch (e) {
    if (!silence)
      throw new Error("\u041D\u0435 \u0441\u043C\u043E\u0433\u043B\u0438 \u0437\u0430\u043F\u0438\u0441\u0430\u0442\u044C \u0444\u0430\u0439\u043B: " + file);
  }
};
var entryPoint = ({ pattern = "", mode = "local", prefix = true }) => ({
  name: "replace-entry-point",
  closeBundle: () => {
    var _a;
    let files;
    if (pattern.includes("*"))
      files = fg.sync([`dist/${pattern}`]);
    else
      files = [`dist/${pattern}`];
    for (const file of files) {
      let replaced = (_a = getFileContent(file, mode === "local")) == null ? void 0 : _a.toString();
      replaced = replaced.replace(/([^:])\/\/.*?((\n)|(\r)|(\n\r)|(\r\n))/ig, "$1").replace(/(\/\*.*?\*\/)/g, "");
      replaced = replaced.replace(/\{build_date}/g, (/* @__PURE__ */ new Date()).toString()).replace(/\{build_timestamp}/g, Date.now().toString());
      replaced = replaced.replace(/console\.(warn|log|error|info)/g, "console.debug");
      if (!replaced.startsWith("define")) {
        replaced = replaced.replace(/([\w\W]*?)(\s*?)(define\(\[.*\],[\s]*function\(.*?\)\s*?\{)/, "$3$2$1");
      }
      log(`\u0414\u043E\u0431\u0430\u0432\u0438\u043B\u0438 \u0442\u0435\u0445\u043D\u0438\u0447\u0435\u0441\u043A\u0443\u044E \u0438\u043D\u0444\u043E\u0440\u043C\u0430\u0446\u0438\u044E \u0438 \u043E\u0447\u0438\u0441\u0442\u0438\u043B\u0438 \u0444\u0430\u0439\u043B: ${file}`);
      writeFileContent(file, (prefix ? `/**
*
*   For all questions on development or support, you can contact our technical department
*   Build date: ${(/* @__PURE__ */ new Date()).toString()}. Mode: ${mode}
*
*/
` : "") + replaced, mode === "local");
    }
  }
});

// vite.config.js
import vue from "file:///D:/makeroi/linked-fields/node_modules/@vitejs/plugin-vue/dist/index.mjs";
var __vite_injected_original_import_meta_url = "file:///D:/makeroi/linked-fields/vite.config.js";
var vite_config_default = defineConfig(({ mode }) => {
  const isProduction = mode === "production";
  return {
    build: {
      sourcemap: !isProduction,
      minify: isProduction,
      target: "es2015",
      lib: {
        entry: "src/App.ts",
        fileName: (format, entryName) => "scripts/" + entryName + ".js",
        name: "amo-widget",
        formats: ["amd"]
        // iife
      },
      rollupOptions: {
        // make sure to externalize deps that shouldn't be bundled
        // into your library
        external: [
          "$",
          "_",
          "jquery",
          "backbone",
          "underscore",
          "clipboard",
          "twigjs",
          "moment",
          "lib/components/base/modal",
          "intl-tel-input",
          "intl-tel-input-utils"
        ],
        output: {
          externalLiveBindings: false,
          extend: true,
          freeze: false,
          globals: {
            // eslint-disable-next-line @typescript-eslint/naming-convention
            "lib/components/base/modal": "Modal",
            "moment": "moment"
          },
          amd: {
            forceJsExtensionForImports: true
          }
        },
        watch: {
          include: [
            "./vite.config.js",
            "./resources/script.js",
            "./resources/**/*"
          ],
          patterns: [
            "src",
            "resources"
          ],
          extensions: "ts,json,sass,js,twig"
        }
      }
    },
    css: {
      modules: {
        localsConvention: "camelCase"
      }
    },
    plugins: [
      vue(),
      viteStaticCopy({
        targets: [
          {
            src: [
              "resources/images/",
              "resources/i18n/",
              "resources/templates/"
            ],
            dest: ""
          },
          {
            src: "resources/external/*.js",
            dest: "external"
          },
          {
            src: `resources/manifest.json`,
            dest: "",
            rename: "manifest.json"
          },
          {
            src: `resources/script.js`,
            dest: "",
            rename: "script.js"
          }
        ]
      }),
      entryPoint({ pattern: "scripts/*.js", mode }),
      zipPack({
        outFileName: "widget.zip",
        outDir: "dist"
      })
    ],
    resolve: {
      alias: {
        vue: "vue/dist/vue.esm-bundler.js",
        "@": fileURLToPath(new URL("./src", __vite_injected_original_import_meta_url)),
        "@assets": fileURLToPath(new URL("./resources", __vite_injected_original_import_meta_url))
      }
    },
    define: {
      "process.env": {
        NODE_ENV: mode
      }
    }
  };
});
export {
  vite_config_default as default
};
//# sourceMappingURL=data:application/json;base64,
